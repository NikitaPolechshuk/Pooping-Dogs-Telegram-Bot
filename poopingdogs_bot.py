import os
import time
import sqlite3
import telebot
import logging
import hashlib
import random
import string
import numpy as np
from telebot import types
from dotenv import load_dotenv
from PIL import Image
from model_utils import load_yolo_model


LOG_FILE = "bot_debug.log"
IMAGES_DIR = "images"
BAN_PROCENT = 30  # –ø—Ä–æ—Ü–µ–Ω—Ç —Ñ–æ—Ç–æ –±–µ–∑ —Å–æ–±–∞–∫, –∫–æ–≥–¥–∞ –∑–∞–±–∞–Ω–∏—Ç

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
WELCOME_MESSAGE = """
üêï‚Äçü¶∫ –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üê©

–ù–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –º–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∫–∞–∫–∞—é—â–∏—Ö —Å–æ–±–∞–∫ üí©üê∂.
–ü–æ–º–æ–≥–∏ –Ω–∞–º –æ–±—É—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö —Ö–æ–∑—è–µ–≤,
–Ω–µ —É–±–∏—Ä–∞—é—â–∏—Ö –∑–∞ —Å–≤–æ–∏–º–∏ –ø–∏—Ç–æ–º—Ü–∞–º–∏! üïµÔ∏è‚Äç‚ôÇÔ∏èüîç

üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", –º–æ–∂–Ω–æ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤
üóÑÔ∏è –Ø —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
üñºÔ∏è –ß–µ–º –±–æ–ª—å—à–µ –∫–∞–¥—Ä–æ–≤ - —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –Ω–∞—à–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
üìä –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üöÄ –í–º–µ—Å—Ç–µ –Ω–∞—É—á–∏–º –ò–ò –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π —á–∏—Å—Ç–æ—Ç—ã! ‚ôªÔ∏è

P.S. –ö–∞–∂–¥–∞—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è - —ç—Ç–æ —à–∞–≥ –∫ —Ü–∏–≤–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –≤—ã–≥—É–ª—É —Å–æ–±–∞–∫! üèÜ
"""

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLOv8
model = load_yolo_model()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)
os.makedirs(IMAGES_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler(),
    ],
)
logging.getLogger("urllib3").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)


class DatabaseError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ë–î"""

    pass


def generate_random_string(length=8):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä"""
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(length))


def is_dog_on_image(image_path):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–æ–±–∞–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é YOLOv8
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–æ–±–∞–∫–∞
    """
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(image_path)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy array
        img_array = np.array(img)

        # –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        results = model(img_array)

        # –ö–ª–∞—Å—Å "—Å–æ–±–∞–∫–∞" –≤ COCO dataset –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å 16
        dog_class_id = 16

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        for result in results:
            for box in result.boxes:
                if int(box.cls) == dog_class_id:
                    return True
        return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return False


def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        conn = sqlite3.connect("bot_database.db")
        conn.row_factory = sqlite3.Row
        logger.debug("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
        return conn
    except sqlite3.Error as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}"
        logger.error(error_msg, exc_info=True)
        raise DatabaseError(error_msg)


def execute_db_query(query, params=(), commit=False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        logger.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {query}")
        logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")

        cursor.execute(query, params)

        if commit:
            conn.commit()
            logger.debug("–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –∑–∞–∫–æ–º–º–∏—á–µ–Ω")
            return None
        else:
            result = cursor.fetchall()
            logger.debug("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return result

    except sqlite3.Error as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        logger.error(error_msg, exc_info=True)
        raise DatabaseError(error_msg)
    finally:
        if conn:
            conn.close()
            logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")


def get_or_create_user(telegram_id):
    """–ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id={telegram_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = execute_db_query(
            "SELECT id FROM users WHERE telegram_id = ?", (telegram_id,)
        )

        if user:
            user_id = user[0]["id"]
            logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user_id}")
            return user_id
        else:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ")

            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
            execute_db_query(
                "INSERT INTO users (telegram_id) VALUES (?)",
                (telegram_id,),
                commit=True,
            )

            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = execute_db_query(
                "SELECT id FROM users WHERE telegram_id = ?", (telegram_id,)
            )

            if not new_user:
                raise DatabaseError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID "
                                    "—Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            user_id = new_user[0]["id"]
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user_id}")
            return user_id

    except DatabaseError as e:
        logger.critical(
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {str(e)}",
            exc_info=True
        )
        raise


def save_photo_to_db(user_id, file_name, file_hash):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å–æ–±–∞–∫"""
    try:
        file_path = os.path.join(IMAGES_DIR, file_name)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–±–∞–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ
        is_dog = is_dog_on_image(file_path)

        logger.info(
            f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è user_id={user_id}, "
            f"–∏–º—è={file_name}, is_dog={is_dog}"
        )

        execute_db_query(
            """
            INSERT INTO images (name, user_id, is_dog, file_hash)
            VALUES (?, ?, ?, ?)
            """,
            (file_name, user_id, int(is_dog), file_hash),
            commit=True,
        )

        logger.info("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
        return is_dog  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ —Å–æ–±–∞–∫–∏

    except DatabaseError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –≤ –ë–î: {str(e)}",
                     exc_info=True)
        raise


def get_user_photo_stats(db_user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param db_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–Ω–µ telegram_id)
    :return: tuple (total_photos, dog_photos) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ —Å —Å–æ–±–∞–∫–∞–º–∏
        result = execute_db_query(
            """
            SELECT
                COUNT(*) as total_photos,
                SUM(CASE WHEN is_dog = 1 THEN 1 ELSE 0 END) as dog_photos
            FROM images
            WHERE user_id = ?
            """,
            (db_user_id,),
        )

        if result and len(result) > 0:
            return result[0]["total_photos"], result[0]["dog_photos"]
        return 0, 0  # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ

    except DatabaseError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user_id={db_user_id}: "
                     f"{str(e)}")
        return None


def ban_user(db_user_id):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param user_db_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–Ω–µ telegram_id)
    :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        execute_db_query(
            "UPDATE users SET ban_status = 1 WHERE id = ?",
            (db_user_id,),
            commit=True
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {db_user_id} '–∑–∞–±–∞–Ω–µ–Ω'")
        return True
    except DatabaseError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è ban_status –¥–ª—è user_id={db_user_id}: "
                     f"{str(e)}")
        return False


def is_user_banned(db_user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :param db_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    :return: True –µ—Å–ª–∏ –∑–∞–±–∞–Ω–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        result = execute_db_query(
            "SELECT ban_status FROM users WHERE id = ?", (db_user_id,)
        )
        if result and len(result) > 0:
            # –í SQLite –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ 0/1
            return bool(result[0]["ban_status"])
        return False
    except DatabaseError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞ –¥–ª—è user_id={db_user_id}: "
                     f"{str(e)}")
        return False


def calculate_file_hash(file_content):
    """–í—ã—á–∏—Å–ª—è–µ—Ç SHA-256 —Ö–µ—à —Ñ–∞–π–ª–∞ –∏–∑ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    sha256 = hashlib.sha256()
    sha256.update(file_content)
    return sha256.hexdigest()


@bot.message_handler(commands=["start"])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–Ω–æ–ø–∫–æ–π"""
    try:
        user_id = message.from_user.id
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –æ—Ç user_id={user_id}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [
            types.KeyboardButton("–°—Ç–∞—Ä—Ç"),
            types.KeyboardButton("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        ]
        markup.add(*buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, WELCOME_MESSAGE, reply_markup=markup)

        logger.debug(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {str(e)}", exc_info=True)
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")


@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ä—Ç")
def handle_start_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç"""
    handle_start(message)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è /start


@bot.message_handler(func=lambda message: message.text == "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def handle_stats_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        user_id = message.from_user.id
        user_db_id = get_or_create_user(user_id)
        stats = get_user_photo_stats(user_db_id)

        if stats is None:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return

        total, dogs = stats

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        if total > 0:
            percentage = (dogs / total) * 100
            response = (
                f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: <b>{total}</b>\n"
                f"üê∂ –§–æ—Ç–æ —Å —Å–æ–±–∞–∫–∞–º–∏: <b>{dogs}</b>\n"
                f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–±–∞–∫: <b>{percentage:.1f}%</b>\n\n"
                f"{'üêæ–í—ã –±–æ–ª—å—à–æ–π –ª—é–±–∏—Ç–µ–ª—å —Å–æ–±–∞–∫!üêï' if percentage > 90 else ''}"
            )
        else:
            response = "üìä –í—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ"

        bot.reply_to(message, response, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_stats_button: {str(e)}", exc_info=True)
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "–±–µ–∑ username"
        current_time = time.time()

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç user_id={user_id} (@{username})")

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        try:
            db_user_id = get_or_create_user(user_id)
        except DatabaseError:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            bot.reply_to(message, "‚õî –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
        ban_status = is_user_banned(db_user_id)
        if ban_status:
            logger.warning(
                f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: "
                f"telegram_id={user_id}"
            )
            bot.reply_to(message, "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        file_extension = file_info.file_path.split(".")[-1]
        random_str = generate_random_string()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É
        file_name = f"photo_{user_id}_{int(current_time)}_{random_str}.{file_extension}"
        file_path = os.path.join(IMAGES_DIR, file_name)

        logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ: {file_name}")

        try:
            downloaded_file = bot.download_file(file_info.file_path)

            # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞
            file_hash = calculate_file_hash(downloaded_file)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –≤ –ë–î
            duplicate = execute_db_query(
                "SELECT 1 FROM images WHERE file_hash = ?",
                (file_hash,)
            )
            if duplicate:
                bot.reply_to(message, "‚è≠Ô∏è –≠—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–Ω–µ–µ")
                return

            with open(file_path, "wb") as new_file:
                new_file.write(downloaded_file)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å–æ–±–∞–∫
            try:
                is_dog = save_photo_to_db(db_user_id, file_name, file_hash)
                if is_dog:
                    bot.reply_to(message, "‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! "
                                          "üê∂ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–æ–±–∞–∫–∞!")
                else:
                    bot.reply_to(message, "‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! "
                                          "(–°–æ–±–∞–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞)")
            except DatabaseError:
                bot.reply_to(
                    message, "‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, "
                             "–Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
                )

            # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–∞–¥–æ –ª–∏ –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            total_photos, dog_photos = get_user_photo_stats(db_user_id)
            logger.info(
                f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª—è c ID {db_user_id}: "
                f"–≤—Å–µ–≥–æ {total_photos}, c —Å–æ–±–∞–∫–∞–º–∏ {dog_photos}"
            )
            if (
                total_photos > 20
                and 100*(total_photos-dog_photos)/total_photos > BAN_PROCENT
            ):
                ban_user(db_user_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}", exc_info=True)
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")

    except Exception as e:
        logger.critical(
            f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_photo: {str(e)}", exc_info=True
        )
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")


if __name__ == "__main__":
    try:
        logger.info("----- –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω -----")
        logger.debug(f"–ü–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {IMAGES_DIR}")
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
    finally:
        logger.info("----- –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω -----")
